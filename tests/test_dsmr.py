from decimal import Decimal
from unittest import TestCase

import RFXtrx


class DsmrTestCase(TestCase):

    def setUp(self):
        self.parser = RFXtrx.lowlevel.Dsmr()

    def test_parse(self):
        data = [0x05, 0x62, 0x01, 0x00, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(RFXtrx.lowlevel.Dsmr, type(packet))
        self.assertEqual(packet.packetlength, 5)
        self.assertEqual(packet.packettype, 0x62)
        self.assertEqual(packet.subtype, 1)
        self.assertEqual(packet.type_string, "P1")
        self.assertEqual(packet.seqnbr, 0)
        self.assertEqual(packet.id_string, None)

    def test_header_data(self):
        data = [0x1A, 0x62, 0x01, 0x00, 0x2F, 0x58, 0x4D, 0x58, 0x35, 0x4C, 0x47, 0x42, 0x42,
                0x4C, 0x41, 0x34, 0x34, 0x31, 0x35, 0x35, 0x37, 0x30, 0x30, 0x37, 0x38, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, None)

    def test_version_data(self):
        data = [0x12, 0x62, 0x01, 0x02, 0x31, 0x2D, 0x33, 0x3A, 0x30,
                0x2E, 0x32, 0x2E, 0x38, 0x28, 0x35, 0x30, 0x29, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, None)

    def test_equipment_identifier(self):
        data = [0x33, 0x62, 0x01, 0x04, 0x30, 0x2D, 0x30, 0x3A, 0x39, 0x36, 0x2E, 0x31, 0x2E, 0x31, 0x28, 0x34, 0x35, 0x33, 0x30, 0x33, 0x30, 0x33, 0x34, 0x33, 0x36,
                0x33, 0x30, 0x33, 0x30, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x33, 0x38, 0x33, 0x33, 0x33, 0x32, 0x33, 0x39, 0x33, 0x35, 0x33, 0x31, 0x33, 0x38, 0x29, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, None)

    def test_electricity_used_tariff_1(self):
        data = [0x1E, 0x62, 0x01, 0x05, 0x31, 0x2D, 0x30, 0x3A, 0x31, 0x2E, 0x38, 0x2E, 0x31, 0x28, 0x30,
                0x30, 0x30, 0x33, 0x31, 0x34, 0x2E, 0x39, 0x38, 0x33, 0x2A, 0x6B, 0x57, 0x68, 0x29, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, 'dsmr:1')
        self.assertEqual(packet.electricity_used_tariff_1, Decimal('314.983'))
        self.assertEqual(packet.electricity_used_tariff_1_unit, 'kWh')

    def test_electricity_used_tariff_2(self):
        data = [0x1E, 0x62, 0x01, 0x06, 0x31, 0x2D, 0x30, 0x3A, 0x31, 0x2E, 0x38, 0x2E, 0x32, 0x28, 0x30,
                0x30, 0x30, 0x32, 0x33, 0x32, 0x2E, 0x36, 0x38, 0x36, 0x2A, 0x6B, 0x57, 0x68, 0x29, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, 'dsmr:1')
        self.assertEqual(packet.electricity_used_tariff_2, Decimal('232.686'))
        self.assertEqual(packet.electricity_used_tariff_2_unit, 'kWh')

    def test_electricity_delivered_tariff_1(self):
        data = [0x1E, 0x62, 0x01, 0x07, 0x31, 0x2D, 0x30, 0x3A, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x28, 0x30,
                0x30, 0x30, 0x31, 0x38, 0x31, 0x2E, 0x35, 0x38, 0x34, 0x2A, 0x6B, 0x57, 0x68, 0x29, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, 'dsmr:1')
        self.assertEqual(packet.electricity_delivered_tariff_1,
                         Decimal('181.584'))
        self.assertEqual(packet.electricity_delivered_tariff_1_unit, 'kWh')

    def test_electricity_delivered_tariff_2(self):
        data = [0x1E, 0x62, 0x01, 0x08, 0x31, 0x2D, 0x30, 0x3A, 0x32, 0x2E, 0x38, 0x2E, 0x32, 0x28, 0x30,
                0x30, 0x30, 0x34, 0x32, 0x33, 0x2E, 0x38, 0x34, 0x33, 0x2A, 0x6B, 0x57, 0x68, 0x29, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, 'dsmr:1')
        self.assertEqual(packet.electricity_delivered_tariff_2,
                         Decimal('423.843'))
        self.assertEqual(packet.electricity_delivered_tariff_2_unit, 'kWh')

    def test_checksum_data(self):
        data = [0x0A, 0x62, 0x01, 0x25, 0x21,
                0x44, 0x43, 0x44, 0x36, 0x0D, 0x0A]
        packet = RFXtrx.lowlevel.parse(data)

        self.assertEqual(packet.id_string, None)
